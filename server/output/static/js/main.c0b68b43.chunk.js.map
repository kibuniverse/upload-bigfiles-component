{"version":3,"sources":["utils/getFileChunkHash.ts","utils/createHash.ts","utils/Apiurl.ts","utils/uploadFile.ts","utils/request.ts","utils/getUploadingFileIndexById.ts","disposeAllData.ts","utils/calculateUploadProcess.ts","utils/getExtendName.ts","components/WaitCalculate.tsx","components/AddFileBox.tsx","components/UploadProcessBar.tsx","components/FileUploadStatusBox.tsx","components/WaitUploadFiles.tsx","components/Divider.tsx","components/UploadedFiles.tsx","components/Main.tsx","App.tsx","index.tsx"],"names":["getFileChunkHash","file","chunkSize","fileChunkList","cur","index","size","push","slice","hash","name","fileName","calculatehash","Promise","reslove","spark","SparkMD5","ArrayBuffer","count","loadNext","reader","FileReader","readAsArrayBuffer","onload","e","append","target","result","length","end","ipUrl","servicePath","sendChunkRequest","mergeRequest","verify","UploadFile","concurrency","updatePercent","a","reject","chunkList","len","counter","isStop","start","item","shift","formdata","FormData","xhr","XMLHttpRequest","onerror","status","upload","onprogress","total","percent","loaded","id","open","send","setTimeout","Math","random","requset","paramsObj","url","data","method","headers","resolve","Object","keys","forEach","key","setRequestHeader","onreadystatechange","readyState","responseText","getUploadingFileById","arr","i","DisposeAllData","props","waitCalculateFiles","waitUploadFiles","uploadedFiles","updateWaitCalculateFile","updateWaitUploadFile","updateUploadedFiles","isCalculating","chunksConcurrenceUploadNum","this","parseInt","String","newFiles","Date","getTime","calculateFilesMessage","waituploadFile","getFileChunkList","uploadProcess","uploadPercentArr","uploadedSize","console","info","Array","fill","addCalculatedFile","newWaitUploadFile","waitUploadFile","verifyRequest","verifyData","JSON","parse","completeFileUpload","AlreadyUploadList","calculeateAlreadyUploadSize","getUploadingFileIndexById","filter","indexOf","uploadFile","updateUploadFilePercent","bind","then","res","uploadedMessage","splice","addUploadedFiles","filehash","request","stringify","fileHash","fileIndex","calculateUploadProcess","newname","nameStr","split","WaitCalculateFiles","listItem","files","map","style","width","margin","borderRadius","textAlign","color","padding","border","backgroundColor","display","listStyle","AddFileBox","borderStyle","position","backgroundImage","backgroundSize","height","opacity","type","onChange","handleFileChange","multiple","UploadProcess","process","overflow","transition","FileUploadBox","float","fontSize","content","clear","marginBottom","WaitUploadFiles","FileUploadStatusBox","marginTop","Divider","text","lineColor","alignItems","flexGrow","borderBottom","UploadedFiles","href","borderTop","listStyleType","flexDirection","Upload","state","uploadClass","UploadClass","addNewFiles","setState","WaitCalculate","React","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c0b68b43.chunk.js","sourcesContent":["import { chunkListsFile } from \"../interfaces/interfaces\";\n\nexport default function getFileChunkHash(file: File, chunkSize: number) {\n  let fileChunkList: Array<chunkListsFile> = [];\n  let cur = 0;\n  let index = 1;\n  while (cur < file.size) {\n    fileChunkList.push({\n      file: file.slice(cur, cur + chunkSize),\n      hash: `${file.name}_${index}`,\n      fileName: file.name,\n    });\n    index++;\n    cur += chunkSize;\n  }\n  return fileChunkList;\n}\n","import SparkMD5 from \"spark-md5\";\nimport { chunkListsFile } from \"../interfaces/interfaces\";\n\nconst createChunkList = async (files: File, chunkSize: number) => {\n  let fileChunkList: any[] = [];\n  let cur = 0;\n  let index = 1;\n  while (cur < files.size) {\n    fileChunkList.push({\n      file: files.slice(cur, cur + chunkSize),\n      hash: `${files.name}_${index}`,\n      fileName: files.name,\n    });\n    index++;\n    cur += chunkSize;\n  }\n  return fileChunkList;\n};\nconst calculatehash = (fileChunkList: Array<chunkListsFile>) =>\n  new Promise((reslove) => {\n    const spark = new SparkMD5.ArrayBuffer();\n    let count = 0;\n    const loadNext = (index: number) => {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(fileChunkList[index].file);\n      reader.onload = (e: any) => {\n        count++;\n        spark.append(e.target.result);\n        // 如果文件处理完成则发送发送请求\n        if (count === fileChunkList.length) {\n          reslove(spark.end());\n          return;\n        }\n        loadNext(count);\n      };\n    };\n    loadNext(0);\n  });\n\nexport { createChunkList, calculatehash };\n","let ipUrl = \"http://127.0.0.1:8001/\";\n\nlet servicePath = {\n  sendChunkRequest: ipUrl + \"file_upload\",\n  mergeRequest: ipUrl + \"mergeReq\",\n  verify: ipUrl + \"verify\",\n};\n\nexport default servicePath;\n","import { IwaitUploadFile, chunkListsFile } from \"../interfaces/interfaces\";\nimport servicePath from \"./Apiurl\";\n\n/**\n * @param file 待上传文件\n * @param concurrency 并发上传最大数\n * @param callback 回调函数，上报修改上传进度\n * @function 上传文件\n */\n\nexport default async function UploadFile(\n  file: IwaitUploadFile,\n  concurrency: number,\n  updatePercent: (id: string, e: any, index: number) => void\n) {\n  return new Promise((reslove, reject) => {\n    let chunkList: Array<chunkListsFile> = file.chunkList;\n    let len = chunkList.length;\n    let counter = 0;\n    let isStop = false;\n    const start = async () => {\n      if (isStop) {\n        return;\n      }\n      const item: chunkListsFile = chunkList.shift() as chunkListsFile;\n      if (item) {\n        const formdata = new FormData();\n        formdata.append(\"fileData\", item.file);\n        formdata.append(\"fileName\", item.fileName);\n        formdata.append(\"hash\", item.hash);\n        const xhr = new XMLHttpRequest();\n        const index: number = item.index as number;\n\n        xhr.onerror = function error(e) {\n          isStop = true;\n          reject(e);\n        };\n\n        // 分片上传完后的回调\n        xhr.onload = () => {\n          if (xhr.status < 200 || xhr.status >= 300) {\n            isStop = true;\n            reject(\"服务端返回状态码错误\");\n          }\n          // 最后一个切片已经上传完成\n          if (counter === len - 1) {\n            reslove();\n          } else {\n            counter++;\n            // 递归调用\n            start();\n          }\n        };\n\n        // 上报分片上传进度\n        if (xhr.upload) {\n          xhr.upload.onprogress = (e: any) => {\n            if (e.total > 0) {\n              e.percent = (e.loaded / e.total) * 100;\n            }\n            updatePercent(file.id as string, e, index);\n          };\n        }\n        xhr.open(\"post\", servicePath.sendChunkRequest, true);\n        xhr.send(formdata);\n      }\n    };\n    while (concurrency > 0) {\n      setTimeout(() => {\n        start();\n      }, Math.random() * 100);\n      concurrency--;\n    }\n  });\n}\n","interface Ipara {\n  url: string;\n  method?: string | undefined;\n  data?: any;\n  headers?: any;\n}\n\nexport default function requset(paramsObj: Ipara) {\n  const url = paramsObj.url;\n  const data = paramsObj.data || null;\n  const method = paramsObj.method || \"post\";\n  const headers = paramsObj.headers || {};\n  return new Promise((resolve) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open(method, url);\n    Object.keys(headers).forEach((key) => {\n      xhr.setRequestHeader(key, headers[key]);\n    });\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        if ((xhr.status >= 200 && xhr.status <= 300) || xhr.status === 304) {\n          resolve({\n            data: xhr.responseText,\n          });\n        }\n      }\n    };\n    xhr.send(data);\n  });\n}\n","import { IwaitUploadFile } from \"../interfaces/interfaces\";\n\nexport default function getUploadingFileById(\n  id: string,\n  arr: Array<IwaitUploadFile>\n): number {\n  for (let i = 0, len = arr.length; i < len; i++) {\n    if (arr[i].id === id) {\n      return i;\n    }\n  }\n  return -1;\n}\n","import { UtilClassInterface } from \"./interfaces/utilsClassInterface\";\nimport {\n  IwaitCalculateFile,\n  IwaitUploadFile,\n  chunkListsFile,\n  IuploadedFile,\n} from \"./interfaces/interfaces\";\nimport getFileChunkList from \"./utils/getFileChunkHash\";\nimport { calculatehash } from \"./utils/createHash\";\nimport uploadFile from \"./utils/uploadFile\";\nimport request from \"./utils/request\";\nimport servicePath from \"./utils/Apiurl\";\nimport getExtendName from \"./utils/getExtendName\";\nimport getUploadingFileIndexById from \"./utils/getUploadingFileIndexById\";\nimport calculateUploadProcess from \"./utils/calculateUploadProcess\";\n\nexport interface Iprops {\n  chunkSize?: number;\n  concurrency: number;\n  updateWaitCalculateFile: (files: Array<IwaitCalculateFile>) => void;\n  updateWaitUploadFile: (files: Array<IwaitUploadFile>) => void;\n  updateUploadedFiles: (files: Array<IuploadedFile>) => void;\n}\n\nexport default class DisposeAllData implements UtilClassInterface {\n  waitCalculateFiles = [] as Array<IwaitCalculateFile>;\n  waitUploadFiles = [] as Array<IwaitUploadFile>;\n  uploadedFiles = [] as Array<IuploadedFile>;\n  updateWaitCalculateFile: (files: Array<IwaitCalculateFile>) => void;\n  updateWaitUploadFile: (files: Array<IwaitUploadFile>) => void;\n  updateUploadedFiles: (files: Array<IuploadedFile>) => void;\n  isCalculating: boolean;\n  chunkSize: number;\n  chunksConcurrenceUploadNum: number;\n  concurrency: number;\n  constructor(props: Iprops) {\n    this.isCalculating = false;\n    // 切片大小默认4M\n    this.chunkSize = props.chunkSize ? props.chunkSize : 4 * 1024 * 1024;\n    this.concurrency = props.concurrency ? props.concurrency : 3;\n    this.updateWaitCalculateFile = props.updateWaitCalculateFile;\n    this.updateWaitUploadFile = props.updateWaitUploadFile;\n    this.updateUploadedFiles = props.updateUploadedFiles;\n    this.chunksConcurrenceUploadNum = parseInt(\n      String(10 / this.waitUploadFiles.length)\n    );\n  }\n\n  /**\n   * @function 对外暴露的添加文件方法\n   * @param newFiles 新添加的文件数组\n   */\n  public addNewFiles(newFiles: FileList) {\n    for (let i = 0, len = newFiles.length; i < len; i++) {\n      this.waitCalculateFiles.push({\n        id: `${newFiles[i].name}_${new Date().getTime()}`,\n        file: newFiles[i],\n      });\n    }\n\n    this.updateWaitCalculateFile(this.waitCalculateFiles);\n    // 开始计算已添加的文件的hash\n    this.calculateFilesMessage();\n  }\n\n  /**\n   * @function 获取文件切片以及hash\n   */\n  private async calculateFilesMessage() {\n    while (this.waitCalculateFiles.length > 0) {\n      let file: any = this.waitCalculateFiles[0].file;\n      let waituploadFile: IwaitUploadFile = {\n        id: `${file.name as String}_${new Date().getTime()}`,\n        file: file,\n        chunkList: getFileChunkList(file, this.chunkSize),\n        uploadProcess: 0,\n        uploadPercentArr: [],\n        uploadedSize: 0,\n      };\n      let hash: string = (await calculatehash(\n        waituploadFile.chunkList\n      )) as string;\n      waituploadFile.hash = hash;\n      console.info(hash);\n      // hash计算完成，更新待计算文件数组\n      this.waitCalculateFiles.shift();\n      waituploadFile.chunkList.forEach(\n        (item: chunkListsFile, index: number) => {\n          item.hash = `${hash}_${index}`;\n          item.index = index;\n          item.fileName = hash;\n        }\n      );\n\n      // 初始化上传进度数组\n      waituploadFile.uploadPercentArr = new Array(\n        waituploadFile.chunkList.length\n      ).fill(0);\n\n      // 更新计算完成文件数组\n      this.addCalculatedFile(waituploadFile);\n      // 上报新的待计算文件数组\n      this.updateWaitCalculateFile(this.waitCalculateFiles);\n    }\n  }\n\n  /**\n   *\n   * @function 添加已上传文件并上报\n   * @param fileName 上传成功的文件名\n   * @param url 返回的url\n   *\n   */\n  private addUploadedFiles(fileName: string, url: string): void {\n    this.uploadedFiles.push({\n      fileName: fileName,\n      url: url,\n    });\n    this.updateUploadedFiles(this.uploadedFiles);\n  }\n\n  /**\n   * @function 增加计算完成文件并上报 调用上传方法\n   * @param newWaitUploadFile 计算hash完成的文件\n   */\n  private async addCalculatedFile(\n    newWaitUploadFile: IwaitUploadFile\n  ): Promise<any> {\n    this.waitUploadFiles.push(newWaitUploadFile);\n    this.updateWaitUploadFile(this.waitUploadFiles);\n    // 上传文件\n    this.upload(newWaitUploadFile);\n  }\n\n  /**\n   * @function 执行验证以及上传逻辑\n   * @param waitUploadFile 待上传文件\n   */\n  private async upload(waitUploadFile: IwaitUploadFile) {\n    // 获取验证信息, 判断文件是否上传，以及已上传文件的信息，处理断点续传\n    let verifyData: any = await this.verifyRequest(\n      waitUploadFile.file.name,\n      waitUploadFile.hash as string\n    );\n    verifyData = JSON.parse(verifyData.data);\n\n    // 文件已经上传完成\n    if (verifyData.status === 1) {\n      this.completeFileUpload(\n        waitUploadFile.id as string,\n        waitUploadFile.file.name,\n        verifyData.url as string\n      );\n      return;\n    }\n    // 处理断点续传逻辑\n    if (verifyData.AlreadyUploadList) {\n      let loaded = this.calculeateAlreadyUploadSize(\n        verifyData.AlreadyUploadList,\n        waitUploadFile\n      );\n      let index = getUploadingFileIndexById(\n        waitUploadFile.id as string,\n        this.waitUploadFiles\n      );\n      if (index === -1) {\n        return;\n      }\n      this.waitUploadFiles[index].uploadedSize = loaded;\n      // 过滤已上传切片\n      this.waitUploadFiles[index].chunkList = this.waitUploadFiles[\n        index\n      ].chunkList.filter(\n        (item: chunkListsFile) =>\n          verifyData.AlreadyUploadList.indexOf(item.hash) === -1\n      );\n    }\n    uploadFile(\n      waitUploadFile,\n      this.concurrency,\n      this.updateUploadFilePercent.bind(this)\n    ).then(async (res) => {\n      let uploadedMessage: any = await this.mergeRequest(waitUploadFile);\n      uploadedMessage = JSON.parse(uploadedMessage.data);\n      this.completeFileUpload(\n        waitUploadFile.id as string,\n        waitUploadFile.file.name,\n        uploadedMessage.url as string\n      );\n    });\n  }\n\n  /**\n   * @function 计算已上传的size\n   * @param AlreadyUploadList 服务端返回的已上传hash列表\n   * @param waitUploadFile 待上传文件\n   * @returns 以上传的切片大小\n   */\n  private calculeateAlreadyUploadSize(\n    AlreadyUploadList: Array<any>,\n    waitUploadFile: IwaitUploadFile\n  ) {\n    let loaded: number = 0;\n    for (let i = 0, len = AlreadyUploadList.length; i < len; i++) {\n      let index = AlreadyUploadList[i].slice(-1);\n      loaded += waitUploadFile.chunkList[index].file.size;\n    }\n    return loaded;\n  }\n\n  /**\n   * @function 处理上传完成后的逻辑，上报更新UI\n   * @param id 文件的id\n   * @param fileName 文件名\n   * @param url 得到的url\n   */\n  private completeFileUpload(id: string, fileName: string, url: string) {\n    let index: number = getUploadingFileIndexById(id, this.waitUploadFiles);\n    this.waitUploadFiles.splice(index, index + 1);\n    this.updateWaitUploadFile(this.waitUploadFiles);\n    this.addUploadedFiles(fileName, url);\n  }\n\n  private verifyRequest(fileName: string, filehash: string) {\n    return request({\n      method: \"post\",\n      url: servicePath.verify,\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n      data: JSON.stringify({\n        fileName: fileName,\n        fileHash: filehash,\n      }),\n    });\n  }\n\n  /**\n   *\n   * @param id 待更改的文件id\n   * @param e onprogress返回值\n   * @param index 切片的下标\n   * @function 更新上传进度\n   */\n  private updateUploadFilePercent(id: string, e: any, index: number): void {\n    let fileIndex: number = getUploadingFileIndexById(id, this.waitUploadFiles);\n    if (fileIndex === -1) {\n      return;\n    }\n    this.waitUploadFiles[fileIndex].uploadPercentArr[index] = e.loaded;\n    this.waitUploadFiles[fileIndex].uploadProcess = calculateUploadProcess(\n      this.waitUploadFiles[fileIndex].uploadedSize,\n      this.waitUploadFiles[fileIndex]\n    );\n    this.updateWaitUploadFile(this.waitUploadFiles);\n  }\n\n  /**\n   *\n   * @param uploadFile 计算完成的文件\n   * @function 发送文件合并请求\n   */\n  private mergeRequest(uploadFile: IwaitUploadFile) {\n    return request({\n      method: \"post\",\n      url: servicePath.mergeRequest,\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n      data: JSON.stringify({\n        fileName: uploadFile.hash,\n        newname: `${uploadFile.hash}.${getExtendName(uploadFile.file.name)}`,\n        size: uploadFile.file.size,\n        chunkSize: this.chunkSize,\n      }),\n    });\n  }\n}\n","import { IwaitUploadFile } from \"../interfaces/interfaces\";\n\nexport default function calculateUploadProcess(\n  uploadedSize: number,\n  waitUploadFile: IwaitUploadFile\n): number {\n  let loaded = uploadedSize;\n  waitUploadFile.uploadPercentArr.forEach((item: number) => {\n    loaded += item;\n  });\n  return loaded / waitUploadFile.file.size;\n}\n","export default function getExtendName(nameStr: string): string {\n  return nameStr.split(\".\")[nameStr.split(\".\").length - 1];\n}\n","import React from \"react\";\n\nimport { IwaitCalculateFile } from \"../interfaces/interfaces\";\n\nexport interface Iprops {\n  files: Array<IwaitCalculateFile>;\n}\n\nconst WaitCalculateFiles = (props: Iprops) => {\n  const listItem = props.files.map((item: IwaitCalculateFile) => (\n    <li key={item.id}>{item.file.name}</li>\n  ));\n  return (\n    <div\n      style={{\n        width: \"400px\",\n        margin: \"auto\",\n        borderRadius: \"10px\",\n        textAlign: \"center\",\n        color: \"blue\",\n        padding: \"10px\",\n        border: \"1px solid #5099ed\",\n        backgroundColor: \"#b8d7fb\",\n        display: `${props.files.length > 0 ? \"block\" : \"none\"}`,\n      }}\n    >\n      <p>正在计算以下文件哈希，请稍等</p>\n      <ul\n        style={{\n          listStyle: \"none\",\n          padding: \"0px\",\n        }}\n      >\n        {listItem}\n      </ul>\n    </div>\n  );\n};\nexport default WaitCalculateFiles;\n","import React from \"react\";\n\ntype IProps = {\n  handleFileChange(e: any): void;\n};\n\nexport default function AddFileBox(props: IProps) {\n  return (\n    <div\n      style={{\n        width: \"400px\",\n        border: \"2px solid gray\",\n        borderStyle: \"dashed\",\n        borderRadius: \"2%\",\n        position: \"relative\",\n        backgroundColor: \"#f9f9f9\",\n        margin: \"100px auto 20px auto\",\n        backgroundImage:\n          'url(\"http://49.234.79.241:8001/ddad1a4c0164ed53590ffeb51d0a1a72.png\")',\n        backgroundSize: \"cover\",\n      }}\n    >\n      <input\n        style={{\n          width: \"400px\",\n          height: \"200px\",\n          opacity: \"0\",\n        }}\n        type=\"file\"\n        onChange={props.handleFileChange}\n        multiple\n      />\n    </div>\n  );\n}\n","import React from \"react\";\n\ninterface Iprops {\n  uploadProcess: number;\n}\n\nconst UploadProcess = (props: Iprops) => {\n  let process = props.uploadProcess;\n  // 考虑计算的偏差\n  while (process >= 1.1) {\n    process = process / 10;\n  }\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"5px\",\n        backgroundColor: \"#c9c9c9\",\n        borderRadius: \"4px\",\n        overflow: \"hidden\",\n      }}\n    >\n      <div\n        style={{\n          width: `${process * 100}%`,\n          height: \"5px\",\n          backgroundImage:\n            \"linear-gradient(to right, #8ebeb9, #3bc9d7, #37b9e9)\",\n          transition: \"all .5s\",\n        }}\n      ></div>\n    </div>\n  );\n};\n\nexport default UploadProcess;\n","import React from \"react\";\nimport { IwaitUploadFile } from \"../interfaces/interfaces\";\nimport UploadProcess from \"./UploadProcessBar\";\n\ninterface Iprops {\n  waitUploadFile: IwaitUploadFile;\n}\n\nfunction FileUploadBox(props: Iprops) {\n  return (\n    <>\n      <div\n        style={{\n          float: \"left\",\n          fontSize: \"15px\",\n          color: \"#719dec\",\n        }}\n      >\n        {props.waitUploadFile.file.name}\n      </div>\n      <div style={{ content: \"\", display: \"block\", clear: \"both\" }}></div>\n      <div\n        style={{\n          marginBottom: \"5px\",\n        }}\n      >\n        <UploadProcess\n          uploadProcess={props.waitUploadFile.uploadProcess as number}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default FileUploadBox;\n","import React from \"react\";\nimport { IwaitUploadFile } from \"../interfaces/interfaces\";\nimport FileUploadStatusBox from \"./FileUploadStatusBox\";\nexport interface Iprops {\n  waitUploadFiles: Array<IwaitUploadFile>;\n}\nexport default function WaitUploadFiles(props: Iprops) {\n  const listItem = props.waitUploadFiles.map(\n    (item: IwaitUploadFile, index: number) => (\n      <li key={item.id}>\n        <FileUploadStatusBox waitUploadFile={item} />\n      </li>\n    )\n  );\n  return (\n    <div\n      style={{\n        width: \"400px\",\n        margin: \"auto\",\n        borderRadius: \"10px\",\n        textAlign: \"center\",\n        color: \"blue\",\n        padding: \"10px\",\n        border: \"1px solid #5099ed\",\n        backgroundColor: \"#fff\",\n        marginTop: \"20px\",\n        transition: \"all 1s\",\n        display: `${props.waitUploadFiles.length > 0 ? \"block\" : \"none\"}`,\n      }}\n    >\n      <ul\n        style={{\n          padding: \"0px\",\n          listStyle: \"none\",\n        }}\n      >\n        {listItem}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport interface Iprops {\n  text?: string;\n  color?: string;\n  lineColor?: string;\n  margin?: string;\n}\n\nconst Divider: React.FC<Iprops> = (props) => {\n  const {\n    text = \"\",\n    color = \"#e7cfcf\",\n    lineColor = \"#e7cfcf\",\n    margin = \"10px\",\n  } = props;\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n      }}\n    >\n      <span\n        style={{\n          flexGrow: 1,\n          borderBottom: `1px solid ${lineColor}`,\n        }}\n      ></span>\n      <div\n        style={{\n          margin: `0 ${margin}`,\n          color: color,\n        }}\n      >\n        {text}\n      </div>\n      <span\n        style={{\n          flexGrow: 1,\n          borderBottom: `1px solid ${lineColor}`,\n        }}\n      ></span>\n    </div>\n  );\n};\n\nexport default Divider;\n","import React from \"react\";\n\nimport { IuploadedFile } from \"../interfaces/interfaces\";\nimport Divider from \"./Divider\";\nexport interface Iprops {\n  uploadedFiles: Array<IuploadedFile>;\n}\n\nconst UploadedFiles = (props: Iprops) => {\n  const listItem = props.uploadedFiles.map(\n    (item: IuploadedFile, index: number) => (\n      <li\n        key={index}\n        style={{\n          marginBottom: \"10px\",\n        }}\n      >\n        <div>{item.fileName}</div>\n        <a href={item.url}>{item.url}</a>\n      </li>\n    )\n  );\n  return (\n    <div\n      style={{\n        width: \"500px\",\n        margin: \"auto\",\n        textAlign: \"center\",\n        color: \"green\",\n        padding: \"10px\",\n        borderTop: \"1px solid green\",\n        backgroundColor: \"#fff\",\n        marginTop: \"20px\",\n        display: `${props.uploadedFiles.length > 0 ? \"block\" : \"none\"}`,\n      }}\n    >\n      <Divider\n        text=\"已上传文件\"\n        margin=\"30px\"\n        color=\"green\"\n        lineColor=\"green\"\n      />\n      <ul\n        style={{\n          padding: \"0px\",\n          listStyle: \"none\",\n          listStyleType: \"none\",\n          display: \"flex\",\n          flexDirection: \"column\",\n        }}\n      >\n        {listItem}\n      </ul>\n    </div>\n  );\n};\n\nexport default UploadedFiles;\n","import * as React from \"react\";\nimport {\n  IfilesStatus,\n  IwaitUploadFile,\n  IwaitCalculateFile,\n  IuploadedFile,\n} from \"../interfaces/interfaces\";\nimport UploadClass from \"../disposeAllData\";\nimport WaitCalculateFiles from \"./WaitCalculate\";\nimport AddFileBox from \"./AddFileBox\";\nimport WaitUploadFiles from \"./WaitUploadFiles\";\nimport UploadedFiles from \"./UploadedFiles\";\nexport default class Upload extends React.Component {\n  readonly state: IfilesStatus = {\n    waitUploadFiles: [],\n    waitCalculateFiles: [],\n    uploadedFiles: [],\n  };\n  // 上传工具类\n  public uploadClass = new UploadClass({\n    chunkSize: 4 * 1024 * 1024,\n    concurrency: 4,\n    updateWaitCalculateFile: this.updateWaitCalculateFile.bind(this),\n    updateWaitUploadFile: this.updateWaitUploadFile.bind(this),\n    updateUploadedFiles: this.updateUploadedFiles.bind(this),\n  });\n\n  /**\n   *\n   * @param files 待计算文件数组\n   * @function 更新待上传计算文件数组\n   */\n  public updateWaitCalculateFile(files: Array<IwaitCalculateFile>): void {\n    this.setState({\n      waitCalculateFiles: files,\n    });\n  }\n  /**\n   *\n   * @param files 上传文件数组\n   * @function 更新待上传文件数组\n   */\n  public updateWaitUploadFile(files: Array<IwaitUploadFile>): void {\n    this.setState({\n      waitUploadFiles: files,\n    });\n  }\n  /**\n   *\n   * @param e 文件修改后传入的参数\n   */\n  public handleFileChange = (e: any): void => {\n    this.uploadClass.addNewFiles(e.target.files);\n  };\n\n  public updateUploadedFiles(files: Array<IuploadedFile>): void {\n    this.setState({\n      uploadedFiles: files,\n    });\n  }\n\n  render() {\n    return (\n      <>\n        <AddFileBox handleFileChange={this.handleFileChange} />\n        <WaitCalculateFiles files={this.state.waitCalculateFiles} />\n        <WaitUploadFiles waitUploadFiles={this.state.waitUploadFiles} />\n        <UploadedFiles uploadedFiles={this.state.uploadedFiles} />\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport Upload from \"./components/Main\";\nfunction App() {\n  return <Upload />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}